<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Wintermute Dev Logs</title><link href="http://ajoo.blog/" rel="alternate"></link><link href="http://ajoo.blog/feeds/all.atom.xml" rel="self"></link><id>http://ajoo.blog/</id><updated>2017-01-25T18:00:00+00:00</updated><entry><title>Intro to RTL-SDR, Part I - Principles andÂ Hardware</title><link href="http://ajoo.blog/intro-to-rtl-sdr-part-i-principles-and-hardware.html" rel="alternate"></link><published>2017-01-25T18:00:00+00:00</published><updated>2017-01-25T18:00:00+00:00</updated><author><name>Ajoo</name></author><id>tag:ajoo.blog,2017-01-25:/intro-to-rtl-sdr-part-i-principles-and-hardware.html</id><summary type="html">&lt;p&gt;A summary of what I&amp;#8217;ve learned about &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; so far. From the working principles of the &lt;span class="caps"&gt;USB&lt;/span&gt; dongles to the software I intend to use to capture and process the data for future&amp;nbsp;projects.&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;div class="figure"&gt;
	&lt;img src="https://c2.staticflickr.com/4/3546/4599500082_93203ec261.jpg" alt="K.W. Vanguard radio"&gt;
	&lt;p class="caption"&gt;A vintage &lt;span class="caps"&gt;K.W.&lt;/span&gt; Vanguard radio. An iconic piece of equipment from a previous era of amateur radio enthusiasts. Image by Derek via &lt;a href=https://www.flickr.com/photos/xenoc/4599500082/&gt;Flickr&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The purpose of this two-part blog post is to introduce a piece of equipment which is quickly becoming a centerpiece of the modern radio enthusiast&amp;#8217;s toolbox. A cheap and powerful device that allows one to digitally sample the electromagnetic spectrum at a wide range of frequencies and is breathing new life into the amateur radio (&lt;span class="caps"&gt;HAM&lt;/span&gt;)&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;Initially this two-part introduction to &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; was meant as a single blog post. I intended to first go through the theory and working principles of the hardware and then move on to the software that I plan to use in future &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; projects. Finally, I intended to use this software to implement a simple &lt;span class="caps"&gt;FM&lt;/span&gt; demodulator in order to illustrate my points through a practical&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;The more I researched this topic however, the more things I found that I wanted to write about here and this post eventually grew to be too lengthy for a single serving. I wanted this first article to be quite in depth, especially regarding the inner workings of &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; dongles because I wanted to have a single point to refer back to on this matter, both for my sake and that of any readers out&amp;nbsp;there.&lt;/p&gt;
&lt;p&gt;As such, in this first part of my introduction to &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; I&amp;#8217;ll go over some basic principles of telecommunications that I feel are essential in order to understand the working principles of &lt;span class="caps"&gt;SDR&lt;/span&gt; hardware. I will then describe the components that make up the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; and explain their&amp;nbsp;functioning. &lt;/p&gt;
&lt;p&gt;This means that this first part is mostly theoretical but I hope that doesn&amp;#8217;t deter anyone from following along. If you&amp;#8217;re not all that interested in understanding how everything works I guess that skipping the Innards of &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; dongles section should still provide a minimum working knowledge of &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; going forward. You can always refer back to this post if you need a more in depth understanding further along the&amp;nbsp;path&amp;#8230;&lt;/p&gt;
&lt;h1&gt;Analog Communications&amp;nbsp;101&lt;/h1&gt;
&lt;p&gt;Communication systems often involve transmitting a message &lt;span class="math"&gt;\(m(t)\)&lt;/span&gt; through a pass-band channel, i.e., a channel where only a limited range of frequencies can be used. A good example is comercial &lt;span class="caps"&gt;FM&lt;/span&gt; radio transmissions, usually restricted to a frequency band between 85 and 108 MHz which must accommodate multiple stations, each one being allocated a &amp;lt;200 kHz band. Given that the message we&amp;#8217;re interested in transmitting often has support in a different range of frequencies, as is the case of raw audio signals in the human hearing range ([20 Hz; 20 kHz]), the signal must first be shifted in frequency in order to satisfy the requirements of the particular channel of&amp;nbsp;communication.&lt;/p&gt;
&lt;p&gt;This is accomplished by modulation whereby one characteristic of a carrier wave (usually sinusoid like &lt;span class="math"&gt;\(A\cos(2\pi f_ct)\)&lt;/span&gt;) will be made to vary according to the &lt;em&gt;modulating signal&lt;/em&gt;: &lt;span class="math"&gt;\(m(t)\)&lt;/span&gt; (also called the message) producing a &lt;em&gt;modulated signal&lt;/em&gt;: &lt;span class="math"&gt;\(s(t)=B(t)\cos[2\pi f_ct + \theta (t)]\)&lt;/span&gt;. There are two main forms of analog&amp;nbsp;modulation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Amplitude Modulation (&lt;span class="caps"&gt;AM&lt;/span&gt;)&lt;/strong&gt;: where the characteristic that is made to vary is the amplitude &lt;span class="math"&gt;\(B(t)\)&lt;/span&gt; of the&amp;nbsp;carrier;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Phase/Frequency Modulation (&lt;span class="caps"&gt;PM&lt;/span&gt;/&lt;span class="caps"&gt;FM&lt;/span&gt;)&lt;/strong&gt;: where the characteristic that varies is the phase &lt;span class="math"&gt;\(\theta (t)\)&lt;/span&gt; of the&amp;nbsp;carrier.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="Modulation" src="http://ajoo.blog/images/modulation.svg"&gt;&lt;/p&gt;
&lt;p&gt;We&amp;#8217;ll discuss these in the following sections as they help introduce a few points that are important later on but before we move on here&amp;#8217;s a useful glossary of terms commonly used in&amp;nbsp;telecommunications:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Baseband&lt;/strong&gt; (signal): Signal that has support in a narrow range of frequencies about 0&amp;nbsp;Hz;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Passband&lt;/strong&gt; (signal): Signal that has support in a narrow range of frequencies about a central frequency &lt;span class="math"&gt;\(f_c\)&lt;/span&gt;;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bandwidth&lt;/strong&gt; (of a signal): some measure of the support of a signal in the frequency domain (has many different technical&amp;nbsp;definitions);&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h2&gt;Amplitude&amp;nbsp;Modulation&lt;/h2&gt;
&lt;p&gt;The simplest form of modulation is double sideband amplitude modulation (&lt;span class="caps"&gt;DSB&lt;/span&gt;-&lt;span class="caps"&gt;AM&lt;/span&gt;). As the name indicates, this modulation uses the amplitude of the modulated signal to encode the message to be sent. This is achieved by simply multiplying (or in telecommunications&amp;#8217; lingo mixing) the message with a sinusoidal carrier&amp;nbsp;wave.&lt;/p&gt;
&lt;div class="math"&gt;$$s(t)=Am(t)\cos(2\pi f_ct)$$&lt;/div&gt;
&lt;p&gt;In the frequency domain this has the effect of convolving the Fourier transform &lt;span class="math"&gt;\(M(f)\)&lt;/span&gt; of &lt;span class="math"&gt;\(m(t)\)&lt;/span&gt; with that of a cosine&amp;nbsp;wave:&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{eqnarray*}
S(f)&amp;amp; =&amp;amp; M(f)*\frac{A}{2}[\delta (f-f_c) + \delta (f+f_c)]\\\\
&amp;amp;=&amp;amp; \frac{A}{2}[M(f-f_c)+M(f+f_c)]
\end{eqnarray*}$$&lt;/div&gt;
&lt;p&gt;which effectively shifts the spectrum of &lt;span class="math"&gt;\(m\)&lt;/span&gt; to &lt;span class="math"&gt;\(f_c\)&lt;/span&gt;. If &lt;span class="math"&gt;\(m(t)\)&lt;/span&gt; is a baseband signal, this (up)converts it to a passband signal around &lt;span class="math"&gt;\(f_c\)&lt;/span&gt; so it can be transmitted through an appropriate bandpass&amp;nbsp;channel.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AM modulation" src="http://ajoo.blog/images/AM_modulation.svg"&gt;&lt;/p&gt;
&lt;p&gt;Demodulating the signal can in theory be done by multiplying again by a sinusoid of the appropriate frequency. This second mixing will shift a copy of the original message back to f=0 and another to a frequency &lt;span class="math"&gt;\(f=2f_c\)&lt;/span&gt; which can be discarded by low-pass&amp;nbsp;filtering. &lt;/p&gt;
&lt;p&gt;&lt;img alt="AM demodulation" src="http://ajoo.blog/images/AM_demodulation.svg"&gt;&lt;/p&gt;
&lt;p&gt;On the receiver side however we don&amp;#8217;t know the original phase of the carrier, which we will denote &lt;span class="math"&gt;\(\phi\)&lt;/span&gt;, and therefore it&amp;#8217;s impossible to align it with the sinusoid generated locally at the receiver end. Introducing this initial phase our received signal can be written&amp;nbsp;as:&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{eqnarray*}
s(t)&amp;amp; =&amp;amp; Am(t)\cos(2\pi f_ct+\phi)\\\\
&amp;amp; =&amp;amp; Am(t)[\cos(2\pi f_ct)\cos(\phi) - \sin(2\pi f_ct)\sin(\phi)]
\end{eqnarray*}$$&lt;/div&gt;
&lt;p&gt;The result of our naive demodulation scheme is&amp;nbsp;then:&lt;/p&gt;
&lt;div class="math"&gt;$$s(t)\cos(2\pi f_ct) = \frac{A}{2}m(t)\{[1+\cos(4\pi f_ct)]\cos(\phi)-\sin(4\pi f_ct)\sin(\phi)\}$$&lt;/div&gt;
&lt;p&gt;This is effectively &lt;span class="math"&gt;\(\frac{A}{2}m(t)\cos(\phi)\)&lt;/span&gt; + a couple terms at frequency &lt;span class="math"&gt;\(2f_c\)&lt;/span&gt; which are the result of this second mixing. Low pass filtering this signal to get rid of these higher frequency components then yields the desired result with one caveat: the constant factor &lt;span class="math"&gt;\(\cos(\phi)\)&lt;/span&gt; which in the worst case is 0 when the two waves are in quadrature with each&amp;nbsp;other.&lt;/p&gt;
&lt;p&gt;One way to get around this scheme&amp;#8217;s limitation is mixing the received signal not only with a locally generated sinusoidal wave &lt;span class="math"&gt;\(\cos(2\pi f_ct)\)&lt;/span&gt; but also with a second sinusoid shifted 90Âº in phase: &lt;span class="math"&gt;\(-\sin(2\pi f_ct)\)&lt;/span&gt;. After low pass-filtering this results&amp;nbsp;in:
&lt;/p&gt;
&lt;div class="math"&gt;$$s_b(t)\doteq h_{LP}(t)*s(t)\begin{bmatrix}\cos(2\pi f_ct) \\-\sin(2\pi f_ct) \end{bmatrix}=\frac{A}{2}m(t)\begin{bmatrix}\cos(\phi) \\ \sin(\phi) \end{bmatrix}$$&lt;/div&gt;
&lt;p&gt;
And since the sine and cosine can&amp;#8217;t both be 0 we can always recover our message. An elegant way of doing that is by taking the Euclidean norm of the vector which gets rid of the factor depending on &lt;span class="math"&gt;\(\phi\)&lt;/span&gt; yielding &lt;span class="math"&gt;\(Am(t)/2\)&lt;/span&gt;. We can also figure out the original carrier wave&amp;#8217;s phase from the arctangent of the two&amp;nbsp;components.&lt;/p&gt;
&lt;p&gt;&lt;img alt="AM demodulation diagram" src="http://ajoo.blog/images/AM_demodulation_diagram_cb.svg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;It is important to note however that in &lt;strong&gt;standard &lt;span class="caps"&gt;AM&lt;/span&gt;&lt;/strong&gt; the message must first be shifted by a constant C such that &lt;span class="math"&gt;\(m(t)+C\geq 0\)&lt;/span&gt;. This means higher power consumption since we&amp;#8217;re &amp;#8220;wasting&amp;#8221; energy transmitting the carrier together with the message but on the other hand the receiver has access to the original carrier and certain simpler demodulation schemes such as envelope detection are&amp;nbsp;available.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Complex Baseband&amp;nbsp;Representation&lt;/h2&gt;
&lt;p&gt;What we&amp;#8217;ve done in order to demodulate &lt;span class="caps"&gt;AM&lt;/span&gt; is essentially downconvert the modulated signal back to baseband. We realized however that mixing with a single sinusoid does not capture all the information present in the original passband signal but that two not in phase sinusoids must be used. This can be interpreted making use of the fact that Fourier transforms of real signals are in the general case complex functions of frequency satisfying &lt;span class="math"&gt;\(S(f)=S^*(-f)\)&lt;/span&gt;. Mixing a passband signal with a cosine wave will shift the spectrum but kill any imaginary component since the positive and negative frequency contributions will cancel each other out. The same is true for sine waves and real&amp;nbsp;components. &lt;/p&gt;
&lt;p&gt;One way to retain full information is then to simply multiply the passband signal with a complex sinusoid &lt;span class="math"&gt;\(e^{-j2\pi f_ct}\)&lt;/span&gt; which  will shift only the positive part of the spectrum back to f=0 avoiding the whole&amp;nbsp;issue.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Complex Baseband Spectrum" src="http://ajoo.blog/images/CB_spectrum.svg"&gt;&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s exactly what we&amp;#8217;ve done with our modified demodulation except we disguised it by writing it as a real 2-vector&amp;nbsp;instead:
&lt;/p&gt;
&lt;div class="math"&gt;$$e^{-j2\pi f_ct}=\cos(2\pi f_ct)-j\sin(2\pi f_ct)\rightarrow \begin{bmatrix}\cos(2\pi f_ct) \\-\sin(2\pi f_ct) \end{bmatrix}$$&lt;/div&gt;
&lt;p&gt;In fact, given any passband signal &lt;span class="math"&gt;\(s(t)\)&lt;/span&gt;, we can write it in the&amp;nbsp;form:
&lt;/p&gt;
&lt;div class="math"&gt;$$s(t) = 2s_I(t)\cos(2\pi f_ct)-2s_Q(t)\sin(2\pi f_ct)$$&lt;/div&gt;
&lt;p&gt;
which implicitly defines its &lt;strong&gt;I&lt;/strong&gt;n phase (&lt;span class="math"&gt;\(s_I(t)\)&lt;/span&gt;) and &lt;strong&gt;Q&lt;/strong&gt;uadrature (&lt;span class="math"&gt;\(s_Q(t)\)&lt;/span&gt;) components (I/Q). It&amp;#8217;s &lt;strong&gt;complex baseband representation&lt;/strong&gt; is then defined&amp;nbsp;as:
&lt;/p&gt;
&lt;div class="math"&gt;$$s_b(t) \doteq s_I(t)+js_Q(t)$$&lt;/div&gt;
&lt;p&gt;This is a very useful representation of a pass-band signal since it contains the same information as the original signal but is band-limited by a much lower frequency. If &lt;span class="math"&gt;\(s(t)\)&lt;/span&gt; has a bandwidth of W around a frequency &lt;span class="math"&gt;\(f_c\)&lt;/span&gt;, then it&amp;#8217;s band-limited by &lt;span class="math"&gt;\(f_c+W/2\)&lt;/span&gt; and therefore, by Nyquist&amp;#8217;s theorem, must be sampled at least at &lt;span class="math"&gt;\(f_s \geq 2f_c+W\)&lt;/span&gt;. By contrast, &lt;span class="math"&gt;\(s_b(t)\)&lt;/span&gt; is band-limited by &lt;span class="math"&gt;\(W/2\)&lt;/span&gt; and can be sampled and digitally processed at the (usually) much more amenable &lt;span class="math"&gt;\(f_s \geq W\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Complex Baseband" src="http://ajoo.blog/images/complex_baseband_real_imag.svg"&gt;&lt;/p&gt;
&lt;p&gt;Alternative ways to write &lt;span class="math"&gt;\(s(t)\)&lt;/span&gt; as a function of &lt;span class="math"&gt;\(s_b(t)\)&lt;/span&gt;&amp;nbsp;are:
&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{eqnarray*}
s(t)&amp;amp; =&amp;amp; \mathrm{Re}[2s_b(t)e^{j2\pi f_ct}]\\\\
&amp;amp;=&amp;amp; 2\mid s_b(t)\mid\cos[2\pi f_ct+\angle s_b(t)]
\end{eqnarray*}$$&lt;/div&gt;
&lt;p&gt;The last expression makes obvious what we already saw in the previous section about demodulating an &lt;span class="caps"&gt;AM&lt;/span&gt; signal given it&amp;#8217;s complex baseband representation. That it amounts to taking it&amp;#8217;s complex norm: &lt;span class="math"&gt;\(\mid s_b(t)\mid\)&lt;/span&gt; (also called the envelope). Likewise, it&amp;#8217;s phase &lt;span class="math"&gt;\(\angle s_b(t)\)&lt;/span&gt; gives us all the information necessary to demodulate any angle based&amp;nbsp;modulation.&lt;/p&gt;
&lt;p&gt;We can now represent the same diagram depicting how to obtain the complex baseband representation and reconstruct the original passband signal but in complex&amp;nbsp;notation:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Complex Baseband" src="http://ajoo.blog/images/complex_baseband_complex.svg"&gt;&lt;/p&gt;
&lt;h2&gt;Frequency&amp;nbsp;Modulation&lt;/h2&gt;
&lt;p&gt;In frequency modulation the message is encoded in the instantaneous frequency of the carrier&amp;nbsp;wave:&lt;/p&gt;
&lt;div class="math"&gt;$$\begin{eqnarray*}
s(t) &amp;amp;= &amp;amp;A\cos\left[2\pi \int_{-\infty}^{t}f_c+f_\Delta m(\tau)d\tau\right]\\\\
&amp;amp;= &amp;amp;A\cos\left[2\pi f_ct + 2\pi f_\Delta\int_{-\infty}^{t}m(\tau)d\tau\right]
\end{eqnarray*}$$&lt;/div&gt;
&lt;p&gt;Comparing the above expression with the last formula giving the passband signal from it&amp;#8217;s complex baseband representation we find that for a frequency modulated signal we&amp;nbsp;have:&lt;/p&gt;
&lt;div class="math"&gt;$$\mid s_b(t)\mid = \frac{A}{2},\quad\angle s_b(t) = 2\pi f_\Delta\int_{-\infty}^{t}m(\tau)d\tau$$&lt;/div&gt;
&lt;p&gt;We can thus easily find a scheme to demodulate &lt;span class="caps"&gt;FM&lt;/span&gt; signals by converting to complex baseband and differentiating its phase in order to find the instantaneous&amp;nbsp;frequency:&lt;/p&gt;
&lt;div class="math"&gt;$$\frac{\text{d}\angle s_b(t)}{\text{d}t} = 2\pi f_\Delta m(t)$$&lt;/div&gt;
&lt;p&gt;&lt;img alt="FM Demodulation Diagram" src="http://ajoo.blog/images/FM_demodulation_diagram.svg"&gt;&lt;/p&gt;
&lt;h1&gt;Software Defined&amp;nbsp;Radio&lt;/h1&gt;
&lt;p&gt;Many forms of radio communication systems were designed with analog technology in mind. Software Defined Radio (&lt;strong&gt;&lt;span class="caps"&gt;SDR&lt;/span&gt;&lt;/strong&gt;) is a communication system where part of the traditionally analog signal processing, accomplished by means of analog electronic circuits is replaced by digital signal processing (&lt;span class="caps"&gt;DSP&lt;/span&gt;, accomplished my means of analog to digital conversion/digital to analog conversion (&lt;span class="caps"&gt;ADC&lt;/span&gt;/&lt;span class="caps"&gt;DAC&lt;/span&gt;) and any form of computers or embedded system running &lt;span class="caps"&gt;DSP&lt;/span&gt;&amp;nbsp;software.&lt;/p&gt;
&lt;p&gt;By replacing hardware components with software, through inserting an &lt;span class="caps"&gt;ADC&lt;/span&gt;/&lt;span class="caps"&gt;DAC&lt;/span&gt; as far upstream the signal flow as possible and processing the digital signal instead, very flexible and general purpose systems can be realized since software is much easier to change than hardware components. Ideally, one would place an &lt;span class="caps"&gt;ADC&lt;/span&gt; or &lt;span class="caps"&gt;DAC&lt;/span&gt; directly at the antenna for maximum flexibility  but this is not practical and &lt;span class="caps"&gt;SDR&lt;/span&gt; systems typically include a flexible &lt;a href="https://en.wikipedia.org/wiki/RF_front_end"&gt;radio frequency (&lt;span class="caps"&gt;RF&lt;/span&gt;) front-end&lt;/a&gt; before sampling as in the conceptual diagram below depicting the typical &lt;span class="caps"&gt;SDR&lt;/span&gt; system based on the one that can be found on &lt;a href="https://en.wikipedia.org/wiki/Software-defined_radio"&gt;Wikipedia&amp;#8217;s &lt;span class="caps"&gt;SDR&lt;/span&gt; Page&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Conceptual SDR system" src="http://ajoo.blog/images/SDR_system.svg"&gt;&lt;/p&gt;
&lt;p&gt;Note that the term Software Defined Radio denotes the whole communication system including the antenna, any specialized hardware and the computer/embedded system running the &lt;span class="caps"&gt;DSP&lt;/span&gt;. In the following however we&amp;#8217;ll (ab)use it by equating it with the hardware that is used to deliver the digital samples to a personal computer since that is the use case we&amp;#8217;re interested&amp;nbsp;in.&lt;/p&gt;
&lt;h1&gt;A Cheap &lt;span class="caps"&gt;SDR&lt;/span&gt;&lt;/h1&gt;
&lt;p&gt;There are many general purpose commercially available SDRs, both receiver only and receiver/transceiver, but they&amp;#8217;re rather expensive in general (&amp;gt;â¬100 for &lt;span class="caps"&gt;RX&lt;/span&gt; and &amp;gt;â¬300 for &lt;span class="caps"&gt;RX&lt;/span&gt;/&lt;span class="caps"&gt;TX&lt;/span&gt;). This is where &lt;span class="caps"&gt;DVB&lt;/span&gt;-T &lt;span class="caps"&gt;TV&lt;/span&gt; tuner &lt;span class="caps"&gt;USB&lt;/span&gt; dongles based on the &lt;span class="caps"&gt;RTL2832U&lt;/span&gt; chipset come into play. As the name indicates, these cheap dongles (â¬10~â¬20) were meant for receiving &lt;span class="caps"&gt;DVB&lt;/span&gt;-T &lt;span class="caps"&gt;TV&lt;/span&gt; but hacked drivers from &lt;a href="http://sdr.osmocom.org/trac/wiki/rtl-sdr"&gt;Osmocom&lt;/a&gt; are able to turn them into wideband receiver only SDRs. This cheap &lt;span class="caps"&gt;SDR&lt;/span&gt; is therefore typically known as the &lt;strong&gt;&lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="RTL dongles" src="http://ajoo.blog/images/RTL_dongles.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here you can see the two dongles I own. The one on top looks like a generic &lt;span class="caps"&gt;DVB&lt;/span&gt;-T &lt;span class="caps"&gt;USB&lt;/span&gt; dongle but it was tuned by NooElec for use as a &lt;span class="caps"&gt;SDR&lt;/span&gt;. You can see in the picture the remote that comes with it for its original intended use as a &lt;span class="caps"&gt;TV&lt;/span&gt; tuner. It has a standard &lt;span class="caps"&gt;MCX&lt;/span&gt; antenna connector and comes with a small whip&amp;nbsp;antenna.&lt;/p&gt;
&lt;p&gt;The dongle that you see at the bottom is the one sold by the &lt;a href="http://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/"&gt;&lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; blog&lt;/a&gt;. It comes with several improvements over the generic dongles for use as a &lt;span class="caps"&gt;SDR&lt;/span&gt;. You can read all about these in the the webpage linked. For my intended use of capturing &lt;span class="caps"&gt;GPS&lt;/span&gt; signals I was mostly interested in the software enabled bias-T in order to power an active &lt;span class="caps"&gt;GPS&lt;/span&gt; antenna, the &lt;span class="caps"&gt;SMA&lt;/span&gt; antenna connector and of course the 1 &lt;span class="caps"&gt;PPM&lt;/span&gt; temperature controlled oscillator for more accurate tuning (the passive cooling is a nice plus too since these units tend to run hot when tuning to frequencies &amp;gt; 1500&amp;nbsp;MHz).&lt;/p&gt;
&lt;h2&gt;The innards of &lt;span class="caps"&gt;RTL2832U&lt;/span&gt; based &lt;span class="caps"&gt;DVB&lt;/span&gt;-T &lt;span class="caps"&gt;TV&lt;/span&gt; &lt;span class="caps"&gt;USB&lt;/span&gt;&amp;nbsp;dongles&lt;/h2&gt;
&lt;p&gt;&lt;div class="figure"&gt;
	&lt;img src="http://ajoo.blog/images/RTL_dongle_inside.png" alt="RTL dongle inside"&gt;
	&lt;p class="caption"&gt;&lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; blog &lt;span class="caps"&gt;USB&lt;/span&gt; dongle opened up. &lt;a href=http://www.rtl-sdr.com/buy-rtl-sdr-dvb-t-dongles/&gt;Image&amp;nbsp;source&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;The overall architecture of &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; dongles is based on a &lt;a href="https://en.wikipedia.org/wiki/Superheterodyne_receiver"&gt;superheterodyne receiver&lt;/a&gt; which is a popular design for receivers that must be able to process signals at a wide range of user-selected frequencies, isolating them from other signals and amplifying them. Examples are many conventional &lt;span class="caps"&gt;AM&lt;/span&gt;/&lt;span class="caps"&gt;FM&lt;/span&gt; radio receivers where the user selects a channel by tuning the radio to it&amp;#8217;s carrier wave&amp;nbsp;frequency.&lt;/p&gt;
&lt;p&gt;A selective enough filter must be applied to the signal coming from the antenna in order to filter out other signals and noise outside the band of interest before demodulation. For the purpose described above it must also have a tunable center-frequency which makes its practical implementation troublesome. Superheterodyne architectures solve this by downconverting first to an &lt;strong&gt;intermediate frequency&lt;/strong&gt; (&lt;span class="caps"&gt;IF&lt;/span&gt;) in which more rigorous filtering and amplification stages can be applied now that the signal is at a fixed pre-specified frequency (see the figure below for a typical&amp;nbsp;setup).&lt;/p&gt;
&lt;p&gt;&lt;img alt="Superheterodyne Receiver" src="http://ajoo.blog/images/superhet.svg"&gt;&lt;/p&gt;
&lt;p&gt;This downconversion is achieved by mixing with a sinusoidal wave of the appropriate frequency generated by a local oscillator (&lt;span class="caps"&gt;LO&lt;/span&gt;). When the user selects a frequency &lt;span class="math"&gt;\(f_c\)&lt;/span&gt; to tune to, the &lt;span class="caps"&gt;LO&lt;/span&gt; generates a sine wave at either &lt;span class="math"&gt;\(f_{LO} = f_c-f_{IF}\)&lt;/span&gt; (low-side injection) or &lt;span class="math"&gt;\(f_{LO} = f_c+f_{IF}\)&lt;/span&gt; (high-side injection, note that when using this frequency the spectrum of the resulting signal will be inverted in frequency). A byproduct of this mixing is that both &lt;span class="math"&gt;\(f_c\)&lt;/span&gt; and &lt;span class="math"&gt;\(f_c\mp 2f_{IF}\)&lt;/span&gt; (for low/high side injection respectively) get mixed into the intermediate frequency. The first is the frequency of interest and the other is the so called &lt;strong&gt;image frequency&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IF Spectrum" src="http://ajoo.blog/images/IF_spectrum.svg"&gt;&lt;/p&gt;
&lt;p&gt;An initial radio frequency (&lt;span class="caps"&gt;RF&lt;/span&gt;) filtering stage is therefore useful in order to filter out any signal or noise at this image frequency. This &lt;span class="caps"&gt;RF&lt;/span&gt; filter often has a variable center frequency whose tuning is shared with the &lt;span class="caps"&gt;LO&lt;/span&gt;. Another common component of the &lt;span class="caps"&gt;RF&lt;/span&gt; section of the receiver is an amplifier, often called a low noise amplifier (&lt;span class="caps"&gt;LNA&lt;/span&gt;).&lt;/p&gt;
&lt;p&gt;While traditionally the intermediate frequency signal processing section was analog, lately, due to the ubiquity of integrated circuits and the availability of micro-processors in many devices (such as cell-phones) the trend has been to handle some of these tasks digitally. In this case, superheterodyne architectures are useful as they downconvert a passband signal that is too impractical to sample (due to their high frequency requiring very high sample rates) into a lower frequency passband signal that is more manageable to sample without&amp;nbsp;aliasing.&lt;/p&gt;
&lt;p&gt;In the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; dongles the signal is sampled at a low intermediate frequency after an analog filtering and amplification stage and further processed digitally. &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; dongles contain 2 important integrated circuits (ICs) which implement the different functions of the superheterodyne&amp;nbsp;receiver:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Tuner&lt;/strong&gt;: The &lt;span class="caps"&gt;RF&lt;/span&gt; front-end which implements the analog signal processing part of the receiver and is responsible for the downconversion into the intermediate&amp;nbsp;frequency;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;The &lt;span class="caps"&gt;RTL2832U&lt;/span&gt;&lt;/strong&gt;: Samples the signal and performs additional digital signal processing tasks such as decimation. Also handles &lt;span class="caps"&gt;USB&lt;/span&gt;&amp;nbsp;control.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following sections will go into details about the function of each of these important components. Information from these sections is gathered from multiple sources including the &lt;a href="https://github.com/steve-m/librtlsdr"&gt;Osmocom driver&amp;#8217;s source code&lt;/a&gt;. &lt;a href="http://superkuh.com/rtlsdr.html"&gt;Superkuh&amp;#8217;s website&lt;/a&gt; deserves a special mention as it is a veritable treasure cove for anything &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt;&amp;nbsp;related.&lt;/p&gt;
&lt;h3&gt;Tuner&lt;/h3&gt;
&lt;p&gt;There are two main families of tuner chips of interest for &lt;span class="caps"&gt;SDR&lt;/span&gt; applications, the now discontinued Elonics E4000 and the Raphael Micro &lt;span class="caps"&gt;R820T&lt;/span&gt;/&lt;span class="caps"&gt;R820T2&lt;/span&gt; radio tuner which will be the focus of this discussion. The differences between the T and the T2 are small, essentially amounting to slightly better sensitivity&lt;a href="http://superkuh.com/rtlsdr.html"&gt;Â¹&lt;/a&gt; for practical&amp;nbsp;purposes.&lt;/p&gt;
&lt;p&gt;The &lt;a href="http://superkuh.com/gnuradio/R820T_datasheet-Non_R-20111130_unlocked.pdf"&gt;datasheet&lt;/a&gt; for the &lt;span class="caps"&gt;R820T&lt;/span&gt; was leaked online so a lot is known about the inner workings of this chip. A &lt;a href="http://superkuh.com/R820T2_Register_Description.pdf"&gt;register description&lt;/a&gt; for the &lt;span class="caps"&gt;R820T2&lt;/span&gt; is also available which details the parameters of the tuner that can be set from outside. A high level simplified diagram based on the one found in the datasheet is depicted&amp;nbsp;next:&lt;/p&gt;
&lt;p&gt;&lt;img alt="R820T Diagram" src="http://ajoo.blog/images/R820T.svg"&gt; &lt;/p&gt;
&lt;p&gt;The signal coming from the antenna connector first goes through a low noise amplifier (&lt;span class="caps"&gt;LNA&lt;/span&gt;) and is then filtered by a bandpass filter and an image rejection filter. According to the datasheet, the image rejection is 65&amp;nbsp;dBc.&lt;/p&gt;
&lt;p&gt;A fractional &lt;span class="caps"&gt;PLL&lt;/span&gt; based frequency synthesizer generates the &lt;span class="caps"&gt;LO&lt;/span&gt; that is mixed with this filtered signal in order to downconvert it to a low intermediate frequency. The user controls the local oscillator&amp;#8217;s frequency directly through the parameters of the frequency synthesizer. This indirectly sets the &lt;span class="caps"&gt;IF&lt;/span&gt; frequency and whether low or high-side injection is used. 3.57 MHz and 4.57 MHz are typical values for the &lt;span class="caps"&gt;IF&lt;/span&gt; of &lt;span class="caps"&gt;R820T&lt;/span&gt; dongles&lt;a href="http://superkuh.com/rtlsdr.html"&gt;Â¹&lt;/a&gt; but it&amp;#8217;s essentially up to the driver implementation to choose what values to use (subject to the limits imposed by the parameters of the synthesizer and the &lt;span class="caps"&gt;IF&lt;/span&gt;&amp;nbsp;filter). &lt;/p&gt;
&lt;p&gt;The frequency range that the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; is able to tune to is determined by the range of frequencies that the frequency synthesizer inside the chip can generate. The &lt;span class="caps"&gt;R820T&lt;/span&gt;âs official range found in the data sheet is [42; 1002] MHz with a tuning resolution of 1 Hz but the generally agreed upon real range is [24; 1766] MHz&lt;a href="http://superkuh.com/rtlsdr.html"&gt;Â¹&lt;/a&gt; as determined by the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; community.
In fact, using an experimental set of &lt;a href="https://github.com/mutability/rtl-sdr/"&gt;drivers&lt;/a&gt; this frequency range has been extended as far as [13; 1864] MHz with the upper limit having some variability depending on the dongle&amp;nbsp;used.&lt;/p&gt;
&lt;p&gt;Finally once at the intermediate frequency the signal is again filtered and goes through a variable gain amplifier (&lt;span class="caps"&gt;VGA&lt;/span&gt;). The &lt;span class="caps"&gt;IF&lt;/span&gt; filter is usually more selective than the &lt;span class="caps"&gt;RF&lt;/span&gt; since that is the point of superheterodyne architectures. In the case of the &lt;span class="caps"&gt;R820T&lt;/span&gt; it is composed of a low-pass filter and a high-pass one that can be configured to have a bandwidth as low as 300 kHz&lt;a href="http://lists.osmocom.org/pipermail/osmocom-sdr/2015-February/000019.html"&gt;Â²&lt;/a&gt;. Its &amp;#8220;standard values&amp;#8221; however are either 6, 7 or 8 MHz since these are the bandwidths used by &lt;span class="caps"&gt;DVB&lt;/span&gt;-T&amp;nbsp;signals. &lt;/p&gt;
&lt;p&gt;There are overall 3 gains in the tuner that can be controlled via external configuration: the &lt;span class="caps"&gt;LNA&lt;/span&gt;, the mixer and the &lt;span class="caps"&gt;VGA&lt;/span&gt;. These gains can be set manually although their precise values are absent from the datasheet. They can also be set automatically via automatic gain control (&lt;span class="caps"&gt;AGC&lt;/span&gt;) in order to optimize the signal to noise ratio (&lt;span class="caps"&gt;SNR&lt;/span&gt;). The &lt;span class="caps"&gt;LNA&lt;/span&gt; and mixer have a power detector at their outputs which is used to control their respective gains for this purpose. The &lt;span class="caps"&gt;VGA&lt;/span&gt; &lt;span class="caps"&gt;AGC&lt;/span&gt; is actually controlled via an analog input port to the tuner which is connected to a power detector in the &lt;span class="caps"&gt;RTL2832U&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;A note on the E4000 chips is that these use a 0 Hz &lt;span class="caps"&gt;IF&lt;/span&gt; so in effect they&amp;#8217;re not implementing superheterodyne receivers. This has a notable consequence of producing a &lt;span class="caps"&gt;DC&lt;/span&gt; spike at 0&amp;nbsp;Hz.&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;&lt;span class="caps"&gt;RTL2832U&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;This is the &lt;span class="caps"&gt;IC&lt;/span&gt; that gives the name to the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; dongle. Unlike the tuner,  datasheets are not freely available online (you&amp;#8217;ll need to sign an &lt;span class="caps"&gt;NDA&lt;/span&gt; to obtain one). A lot of what is known about the inner workings of this chip has therefore been figured out by the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; community through reverse&amp;nbsp;engineering. &lt;/p&gt;
&lt;p&gt;Realtek&amp;#8217;s &lt;a href="http://web.archive.org/web/20161012161902/http://www.realtek.com.tw/products/productsView.aspx?Langid=1&amp;amp;PFid=35&amp;amp;Level=4&amp;amp;Conn=3&amp;amp;ProdID=257"&gt;&lt;span class="caps"&gt;RTL2832U&lt;/span&gt; description&lt;/a&gt; states that the chip is meant as a high-performance &lt;span class="caps"&gt;DVB&lt;/span&gt;-T demodulator (with additional support for &lt;span class="caps"&gt;FM&lt;/span&gt; and &lt;span class="caps"&gt;DAB&lt;/span&gt; radio). As such it includes an &lt;span class="caps"&gt;ADC&lt;/span&gt; to sample the &lt;span class="caps"&gt;IF&lt;/span&gt; signal coming from an appropriate tuner, all the specialized &lt;span class="caps"&gt;DSP&lt;/span&gt; required to demodulate &lt;span class="caps"&gt;DVB&lt;/span&gt;-T and a &lt;span class="caps"&gt;USB&lt;/span&gt; controller supporting a &lt;span class="caps"&gt;USB&lt;/span&gt; 2.0 interface. Usage as an &lt;span class="caps"&gt;SDR&lt;/span&gt; takes advantage of a &amp;#8220;debug&amp;#8221; mode in the chip to deliver the digital complex baseband representation samples directly through &lt;span class="caps"&gt;USB&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The following high-level diagram represents my best understanding of the functions the &lt;span class="caps"&gt;RTL2832U&lt;/span&gt; is performing when using a non-zero &lt;span class="caps"&gt;IF&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="RTL2832U Diagram" src="http://ajoo.blog/images/RTL2832U.svg"&gt;&lt;/p&gt;
&lt;p&gt;Initially, the signal coming out of the tuner is sampled by an 8-bit &lt;span class="caps"&gt;ADC&lt;/span&gt; running at 28.8 MHz. No significant aliasing should occur for the low &lt;span class="caps"&gt;IF&lt;/span&gt; values supported if the &lt;span class="caps"&gt;IF&lt;/span&gt; filter is selective enough to kill any strong signals outside its&amp;nbsp;bandwidth.&lt;/p&gt;
&lt;p&gt;A &lt;a href="https://en.wikipedia.org/wiki/Digital_down_converter"&gt;digital downconverter&lt;/a&gt; (&lt;span class="caps"&gt;DDC&lt;/span&gt;) is then responsible for downconverting the digital signal to complex baseband. The process of obtaining the complex baseband representation is the same as for the continuous-time case: mixing with two digital sinusoids in quadrature with each other and low pass filtering. The signal can then be resampled without loss of information since the baseband signal will be band-limited by a lower frequency as was explained in the previous section on complex baseband representation. External configuration parameters inform the &lt;span class="caps"&gt;DDC&lt;/span&gt; of the &lt;span class="caps"&gt;IF&lt;/span&gt; frequency and whether the spectrum is inverted (i.e., if the tuner is high-side&amp;nbsp;injecting).&lt;/p&gt;
&lt;p&gt;Finally decimation (using a &lt;span class="caps"&gt;FIR&lt;/span&gt; low pass filter and downsampling) is applied in order to reduce the sample rate of the signal to a value in the range [225001; 300000] Hz âª [900001; 3200000] Hz. 2.56 MHz is however the generally agreed upon highest safe sample rate where no samples will be dropped by the chip (they may still be dropped by the &lt;span class="caps"&gt;USB&lt;/span&gt;). This decimation is what usually sets the upper limit on the bandwidth of the sampled signal (unless the &lt;span class="caps"&gt;IF&lt;/span&gt; filter bandwidth is specifically chosen as lower than the Nyquist frequency for the sample&amp;nbsp;rate).&lt;/p&gt;
&lt;p&gt;The I and Q complex baseband samples are then delivered through &lt;span class="caps"&gt;USB&lt;/span&gt; as interleaved 8-bit unsigned&amp;nbsp;integers.&lt;/p&gt;
&lt;h2&gt;A High Level Behavioral&amp;nbsp;Model&lt;/h2&gt;
&lt;p&gt;It is sometimes useful to have a simplified picture in mind of the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt;&amp;#8217;s internals. This picture, while not perfectly accurate captures the essential behavior of the hardware while hiding some of the complexity. One such behavioral level model of the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; is presented next, based upon
&lt;a href="http://www.eas.uccs.edu/~mwickert/ece4670/lecture_notes/Lab6.pdf"&gt;Lab 6&lt;/a&gt; from &lt;a href="http://web.stanford.edu/class/ee179/"&gt;Stanford&amp;#8217;s Analog and Digital Communication Systems 2014 course&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img alt="Behavioral Model" src="http://ajoo.blog/images/behavioural_model.svg"&gt; &lt;/p&gt;
&lt;p&gt;In its essence, the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; provides us a digital complex baseband representation of the signal at whatever frequency band we tune to. Doing away with the added complexity of the superheterodyne architecture, the &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt;&amp;#8217;s functioning can be boiled down&amp;nbsp;to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Amplification;&lt;/li&gt;
&lt;li&gt;Finding the complex baseband representation through mixing with a complex sinusoid and low-pass&amp;nbsp;filtering;&lt;/li&gt;
&lt;li&gt;Sampling.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are the essential steps represented in the diagram. The three essential parameters we are able to vary&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The gain values (and possible &lt;span class="caps"&gt;AGC&lt;/span&gt;);&lt;/li&gt;
&lt;li&gt;The center frequency we&amp;#8217;re tuning&amp;nbsp;to;&lt;/li&gt;
&lt;li&gt;The sample rate which can go up to ~2.56 MHz without dropping&amp;nbsp;samples;&lt;/li&gt;
&lt;li&gt;The bandwidth of the filter which can be chosen anywhere from 300 kHz (making use of the &lt;span class="caps"&gt;IF&lt;/span&gt; filter inside the tuner) up to roughly the Nyquist frequency of the chosen sample rate (where the limiting factor will usually be the decimation filter inside the &lt;span class="caps"&gt;RTL2832U&lt;/span&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;Up&amp;nbsp;Next&lt;/h1&gt;
&lt;p&gt;The second part of this introduction will introduce the basic software that most &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; enthusiasts stick to and use it to demodulate &lt;span class="caps"&gt;FM&lt;/span&gt; signals. Stay&amp;nbsp;tuned!&lt;/p&gt;
&lt;h1&gt;Useful&amp;nbsp;Links:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.rtl-sdr.com/"&gt;rtl-sdr&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://sdr.osmocom.org/trac/wiki/rtl-sdr"&gt;Osmocom rtl-sdr&amp;nbsp;wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/RTLSDR/"&gt;&lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; subreddit&lt;/a&gt; A subreddit dedicated to &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt;. Make sure to check their wiki which is filled with useful&amp;nbsp;information.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://rtlsdr.org/"&gt;rtlsdr Community&amp;nbsp;Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://superkuh.com/rtlsdr.html"&gt;superkuh&amp;#8217;s website&lt;/a&gt; An absolute bible when it comes to the internals of &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; &lt;span class="caps"&gt;USB&lt;/span&gt; dongles. Tons of useful information, links to datasheets, schematics,&amp;nbsp;etc&amp;#8230; &lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.eas.uccs.edu/~mwickert/ece4670/"&gt;University of Colorado&amp;#8217;s Communications Lab&lt;/a&gt; Make sure to check out their lab assignments, particularly Lab 6 which this blog post draws inspiration&amp;nbsp;from;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://web.stanford.edu/class/ee179/"&gt;Stanford&amp;#8217;s Analog and Digital Communication Systems 2014 course&lt;/a&gt; Again, make sure to check out the lab assignments for lots of &lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt;&amp;nbsp;material;&lt;/li&gt;
&lt;/ul&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    var location_protocol = (false) ? 'https' : document.location.protocol;
    if (location_protocol !== 'http' &amp;&amp; location_protocol !== 'https') location_protocol = 'https:';
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = location_protocol + '//cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="RTL-SDR"></category><category term="DSP"></category></entry><entry><title>Software Defined GNSS</title><link href="http://ajoo.blog/software-defined-gnss.html" rel="alternate"></link><published>2016-12-18T12:00:00+00:00</published><updated>2017-01-09T13:00:00+00:00</updated><author><name>Ajoo</name></author><id>tag:ajoo.blog,2016-12-18:/software-defined-gnss.html</id><summary type="html">&lt;p&gt;A short introduction to my Software Defined &lt;span class="caps"&gt;GNSS&lt;/span&gt;&amp;nbsp;project&lt;/p&gt;</summary><content type="html">&lt;p&gt;When I first heard about Software Defined Radios (&lt;span class="caps"&gt;SDR&lt;/span&gt;) I was instantly hooked. The ability to probe the electromagnetic spectrum around me and decode the ubiquitous signals being transmitted seemed to open a door to new and interesting experiments. I loved Digital Signal Processing (&lt;span class="caps"&gt;DSP&lt;/span&gt;) when I was in college (still do) and this was exactly what I was looking for to put it in practice. I started looking for a project to sink my teeth in that went besides using established software and a cheap &lt;span class="caps"&gt;SDR&lt;/span&gt; to decode well known &lt;span class="caps"&gt;AM&lt;/span&gt;, &lt;span class="caps"&gt;FM&lt;/span&gt; and &lt;span class="caps"&gt;ADS&lt;/span&gt;-B&amp;nbsp;signals.&lt;/p&gt;
&lt;p&gt;Since my main background is in Guidance, Navigation and Control (and I&amp;#8217;m a person walking this Earth in 2016) I&amp;#8217;ve made use of &lt;span class="caps"&gt;GPS&lt;/span&gt; before and I&amp;#8217;m familiar to some extent with its inner workings from a course in Global Navigation Satellite Systems (&lt;span class="caps"&gt;GNSS&lt;/span&gt;) I attended in college. I&amp;#8217;ve always felt however that my knowledge of this system is not as deep as I want it to be, particularly regarding the receiver side of things. I think it&amp;#8217;s therefore appropriate that my first foray into the exciting world of &lt;span class="caps"&gt;SDR&lt;/span&gt; be the implementation of a &lt;span class="caps"&gt;GPS&lt;/span&gt;/&lt;span class="caps"&gt;GNSS&lt;/span&gt; receiver in software. I intend to take this as far as I can, from measuring &lt;span class="caps"&gt;GPS&lt;/span&gt; L1 signals to computing a full navigation solution of position and velocity, learning as much as I can along the way and sharing it with any interested&amp;nbsp;readers.&lt;/p&gt;
&lt;p&gt;My particular goals for this project are&amp;nbsp;therefore:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;To put my knowledge of &lt;span class="caps"&gt;GNSS&lt;/span&gt;, telecommunications and &lt;span class="caps"&gt;DSP&lt;/span&gt; to work in a practical setting and keep me from getting&amp;nbsp;rusty;&lt;/li&gt;
&lt;li&gt;To fill in the blanks in my knowledge of &lt;span class="caps"&gt;GNSS&lt;/span&gt; receivers&amp;#8217; inner&amp;nbsp;workings;&lt;/li&gt;
&lt;li&gt;To learn about new software libraries and tools, in particular those concerning real time digital signal&amp;nbsp;processing;&lt;/li&gt;
&lt;li&gt;To improve my communication and documentation&amp;nbsp;skills.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1&gt;&lt;/h1&gt;
&lt;h1&gt;Materials&lt;/h1&gt;
&lt;p&gt;There are only two components (three if you&amp;#8217;re counting a decent computer/laptop) required for this project. One is an active &lt;span class="caps"&gt;GPS&lt;/span&gt; Antenna in order to be able to receive &lt;span class="caps"&gt;GPS&lt;/span&gt; signals in the L1 band (1575.42 MHz center frequency) and the other is a Software Defined Radio (&lt;span class="caps"&gt;SDR&lt;/span&gt;) which is responsible for delivering to your computer the digital samples of these signals shifted to&amp;nbsp;baseband.&lt;/p&gt;
&lt;p&gt;I will go into further detail into the hardware in my next blog post so don&amp;#8217;t worry if you don&amp;#8217;t understand what this is for just yet. This section is only meant to give you an idea of what you&amp;#8217;ll need and the costs associated. The particular choices I made&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/RTL-SDR-Blog-RTL2832U-Software-Telescopic/dp/B011HVUEME/ref=lp_10230687011_1_1?srs=10230687011&amp;amp;ie=UTF8&amp;amp;qid=1482078660&amp;amp;sr=8-1"&gt;&lt;span class="caps"&gt;RTL&lt;/span&gt;-&lt;span class="caps"&gt;SDR&lt;/span&gt; Blog &lt;span class="caps"&gt;USB&lt;/span&gt; Dongle&lt;/a&gt; (â¬26) I chose this over other generic &lt;span class="caps"&gt;USB&lt;/span&gt; &lt;span class="caps"&gt;DVB&lt;/span&gt;-T &lt;span class="caps"&gt;TV&lt;/span&gt; dongles because it has a software enabled bias-T which allows me to power an active antenna without additional hardware or soldering mods. It also has other nice enhancements over regular dongles for use in Software Defined Radio and an &lt;span class="caps"&gt;SMA&lt;/span&gt; antenna connector instead of the more common &lt;span class="caps"&gt;MCX&lt;/span&gt; which is great since we won&amp;#8217;t need additional parts to plug in our &lt;span class="caps"&gt;GPS&lt;/span&gt; antenna. You could also get the version without the two telescopic antennas which comes out cheaper (â¬20) since we&amp;#8217;re mostly interested in using a &lt;span class="caps"&gt;GPS&lt;/span&gt;&amp;nbsp;antenna.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.amazon.com/Waterproof-Active-Antenna-28dB-Gain/dp/B00LXRQY9A/ref=lp_10008493011_1_1?srs=10008493011&amp;amp;ie=UTF8&amp;amp;qid=1482079461&amp;amp;sr=8-1"&gt;&lt;span class="caps"&gt;GPS&lt;/span&gt; Active Antenna&lt;/a&gt; (â¬15) Any active &lt;span class="caps"&gt;GPS&lt;/span&gt; antenna should do, there are plenty available at Amazon and other specialized&amp;nbsp;sellers.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Below is a picture I took of the &lt;span class="caps"&gt;USB&lt;/span&gt; dongle and the &lt;span class="caps"&gt;GPS&lt;/span&gt; antenna with a 2 Euro coin for&amp;nbsp;scale:&lt;/p&gt;
&lt;p&gt;&lt;img alt="RTL Dongle and GPS Antenna" src="http://ajoo.blog/images/RTL_dongle_and_GPS_antenna.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;Software&lt;/h1&gt;
&lt;p&gt;Software based &lt;span class="caps"&gt;GNSS&lt;/span&gt; receivers are hardly uncharted waters. There are full fledged software libraries meant to accomplish what this little project of mine set out to do. Below is a list of those I&amp;#8217;m aware&amp;nbsp;of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/taroz/GNSS-SDRLIB"&gt;gnss-sdrlib&lt;/a&gt; An open source &lt;span class="caps"&gt;GNSS&lt;/span&gt; Software Defined Radio Library with nice &lt;span class="caps"&gt;GUI&lt;/span&gt; elements written in C and&amp;nbsp;C++&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gnss-sdr.org"&gt;gnss-sdr&lt;/a&gt; An open source library for implementing &lt;span class="caps"&gt;GNSS&lt;/span&gt; software defined receivers in C++. Based on &lt;span class="caps"&gt;GNU&lt;/span&gt;&amp;nbsp;Radio.&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.rtklib.com/"&gt;rtklib&lt;/a&gt; An open source program package for &lt;span class="caps"&gt;GNSS&lt;/span&gt;&amp;nbsp;positioning&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I will not rely on these libraries except maybe for inspiration and test purposes as this project is meant mostly as an educational experience for myself and for any readers out there. I will attempt to make my posts as informative and as self-contained as possible so that I can refer back to them in the future and so that any reader might follow along and understand how to decode &lt;span class="caps"&gt;GNSS&lt;/span&gt; signals without having to refer to external materials. I will assume only basic knowledge of telecommunications, specially regarding the use of Fourier transforms and time &amp;lt;-&amp;gt; frequency representation of signals but no previous knowledge of &lt;span class="caps"&gt;GNSS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;That being said, here are the major pieces of software that I do plan on&amp;nbsp;using:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.continuum.io/downloads"&gt;Python&lt;/a&gt; It&amp;#8217;s my language of choice for anything data science and scientific computing these days. It&amp;#8217;s open source unlike &lt;span class="caps"&gt;MATLAB&lt;/span&gt;, which is the other big workhorse in my scientific computing toolbox, and that makes it much more appropriate for this series. My choice of distribution is Anaconda which I&amp;#8217;ve been using for a long time and can personaly vouch for. It comes packed with all the scientific libraries you&amp;#8217;ll likely need for this little&amp;nbsp;project;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://gnuradio.org/"&gt;&lt;span class="caps"&gt;GNU&lt;/span&gt; Radio&lt;/a&gt; An open-source toolkit for &lt;span class="caps"&gt;SDR&lt;/span&gt;. Essentially a real-time capable &lt;span class="caps"&gt;DSP&lt;/span&gt; library that can be used in python and C++. I&amp;#8217;m planing to use this in order to be able to decode &lt;span class="caps"&gt;GPS&lt;/span&gt; signals in real time while I&amp;#8217;ll probably stick with the numpy and scipy python libraries for offline processing of collected data. The fact that there is an open source &lt;span class="caps"&gt;SDR&lt;/span&gt; &lt;span class="caps"&gt;GNSS&lt;/span&gt; library that&amp;#8217;s built on top of it leaves me hopeful that it is adequate for my&amp;nbsp;purposes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Keep in mind that these is only what I &lt;em&gt;intend&lt;/em&gt; to use before diving in head first into this project. If at any point they feel inadequate I&amp;#8217;ll have reconsider my choices in order to push the project forward towards my end goals. For one, I&amp;#8217;ll probably have to delve into some C++ coding further on in order to implement functionality non existant in &lt;span class="caps"&gt;GNU&lt;/span&gt; Radio&amp;#8217;s base&amp;nbsp;distribution.&lt;/p&gt;
&lt;h1&gt;Related&amp;nbsp;Endeavours&lt;/h1&gt;
&lt;p&gt;While researching this topic I found a &lt;a href="http://sdrgps.blogspot.com"&gt;blog by Philip Hahn&lt;/a&gt; detailing his experiments with software defined radio &lt;span class="caps"&gt;GPS&lt;/span&gt; and its use in high-power rockets. It should be an interesting read for anyone interested in this&amp;nbsp;topic.&lt;/p&gt;
&lt;p&gt;Another very interesting &lt;a href="http://lea.hamradio.si/~s53mv/navsats/theory.html"&gt;website&lt;/a&gt; I came across on HackerNews documents the construction of a more conventional homemade &lt;span class="caps"&gt;GPS&lt;/span&gt;/&lt;span class="caps"&gt;GLONASS&lt;/span&gt; receiver by Matjaz Vidmar. It pretty much embodies what I hope to achieve with this series except with a lot less fiddling with physical hardware. While searching for the previous link after &amp;#8220;misplacing&amp;#8221; the bookmark I also stumbled upon a similar &lt;a href="http://www.aholme.co.uk/GPS/Main.htm"&gt;project by Andrew Holme&lt;/a&gt; that uses an &lt;span class="caps"&gt;FPGA&lt;/span&gt; to do a lot of &lt;span class="caps"&gt;DSP&lt;/span&gt; heavy&amp;nbsp;lifting.&lt;/p&gt;
&lt;h1&gt;Up&amp;nbsp;Next&lt;/h1&gt;
&lt;p&gt;My next post in this series will go into detail into what exactly is Software Defined Radio and the particular hardware and software that will be used in this project. Stay&amp;nbsp;tuned!&lt;/p&gt;</content><category term="GNSS"></category><category term="RTL-SDR"></category><category term="DSP"></category><category term="Python"></category></entry><entry><title>FirstÂ Post</title><link href="http://ajoo.blog/first-post.html" rel="alternate"></link><published>2016-12-17T14:00:00+00:00</published><updated>2016-12-17T14:00:00+00:00</updated><author><name>Ajoo</name></author><id>tag:ajoo.blog,2016-12-17:/first-post.html</id><summary type="html">&lt;p&gt;Season&amp;#8217;s greetings! I&amp;#8217;ve decided to get an early start on my New Years resolution of writing a personal blog. It&amp;#8217;s been on my bucket list for a long time and I&amp;#8217;m glad that it is finally coming to fruition. In this blog I hope to document â¦&lt;/p&gt;</summary><content type="html">&lt;p&gt;Season&amp;#8217;s greetings! I&amp;#8217;ve decided to get an early start on my New Years resolution of writing a personal blog. It&amp;#8217;s been on my bucket list for a long time and I&amp;#8217;m glad that it is finally coming to fruition. In this blog I hope to document my personal projects and in turn find the motivation to work on them more assiduously. I often find myself talking about them with an imaginary audience, explaining my small decisions and boasting about my small successes, and this looks like a healthier and more useful application of my impulse to share and&amp;nbsp;educate. &lt;/p&gt;
&lt;p&gt;Besides my personal projects, I&amp;#8217;m an avid learner and often succumb to reading textbooks on topics I find interesting. I will also try to share some of what I learn and have learned in the past, both as a way to organize my thoughts, to refresh my knowledge on certain topics and to have a place to refer back to when I need it. I&amp;#8217;ll strive to keep these interesting for any reader but I can&amp;#8217;t promise&amp;nbsp;anything.&lt;/p&gt;
&lt;p&gt;As far as my interests go, and what to expect from this blog, I&amp;#8217;d say if you&amp;#8217;re technology oriented I hope I have something to offer you. My background is mostly in &lt;a href="https://en.wikipedia.org/wiki/Guidance%2C_navigation%2C_and_control"&gt;Guidance, Navigation and Control&lt;/a&gt; and in &lt;a href="https://en.wikipedia.org/wiki/System_identification"&gt;System Identification&lt;/a&gt; and I hope to be able to make use of this extensively in future projects and perhaps more theoretical posts. While my degree is in Aerospace Engineering I am also very interested in robotics in general and I&amp;#8217;d love to get to build a few fun things in the near future. Finally, I&amp;#8217;m an adept participant in machine learning challenges (&lt;a href="https://www.kaggle.com"&gt;kaggle&lt;/a&gt; mostly) and I love statistics. One of my main motivations for starting this blog was being able to do post-mortems of my participations and share what I&amp;#8217;ve learned during each&amp;nbsp;competition.&lt;/p&gt;
&lt;p&gt;In the immediate future I will be starting a project to get acquainted with Software Defined Radio by implementing a &lt;span class="caps"&gt;GPS&lt;/span&gt; receiver in software. I also want to participate in one or more of the following ongoing kaggle competitions: &lt;a href="https://www.kaggle.com/c/two-sigma-financial-modeling"&gt;Two Sigma Financial Modeling Challenge&lt;/a&gt;, &lt;a href="https://www.kaggle.com/c/dstl-satellite-imagery-feature-detection"&gt;Dstl Satellite Imagery Feature Detection&lt;/a&gt;, &lt;a href="https://www.kaggle.com/c/the-nature-conservancy-fisheries-monitoring"&gt;The Nature Conservancy Fisheries Monitoring&lt;/a&gt; so you can expect a post-mortem in a couple month&amp;#8217;s&amp;nbsp;time.&lt;/p&gt;
&lt;p&gt;That&amp;#8217;s it for now. Thanks for reading and I hope I&amp;#8217;ve piqued your&amp;nbsp;interest&amp;#8230;&lt;/p&gt;</content></entry></feed>